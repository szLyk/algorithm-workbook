# 哈夫曼树的特点
# 带权路径长度最小：哈夫曼树的构造保证了编码的平均长度最小，从而实现了最优编码。
# 无损压缩：哈夫曼树编码是一种无损压缩算法，压缩后数据可以无误解码。
# 前缀编码：每个字符的编码都是前缀码，即任意一个字符的编码都不是其他字符编码的前缀。
# 哈夫曼树的构建步骤
# 统计每个字符的频率：从输入的文本中统计出每个字符出现的频率或权重。
#
# 初始化：把每个字符看作一个节点，并将其频率作为该节点的权值，生成一个优先队列（通常是最小堆）。
#
# 构建哈夫曼树：
#
# 从优先队列中取出权值最小的两个节点，将它们合并为一个新节点（新节点的权值为两个节点权值之和）。
# 将合并后的新节点重新加入优先队列。
# 重复上述过程，直到队列中只剩下一个节点，这个节点就是哈夫曼树的根节点。
# 生成编码：从根节点开始，通过左子节点表示为 0，右子节点表示为 1，直到叶子节点为止，这样每个字符就可以通过一串 0 和 1 的比特表示出来。
